
#include "RayPayload.hlsl"
#include "GlobalResources.hlsl"

#pragma max_recursion_depth 1

// Input
RaytracingAccelerationStructure g_AccelStruct;
float4x4                        g_InvViewMatrix;
float4x4                        g_ViewMatrix;
float                           g_Zoom;

// Output
RWTexture2D<float3>             g_Output;

[shader("miss")]
void MainMissShader(inout RayPayload payload : SV_RayPayload)
{
    payload.color = g_EnvTexture.SampleLevel(sampler_g_EnvTexture, WorldRayDirection(), 0).xyz;
}

[shader("raygeneration")]
void MainRayGenShader()
{ 
    uint2 LaunchIndex = DispatchRaysIndex().xy;
    uint2 LaunchDim = DispatchRaysDimensions().xy;

    float2 frameCoord = float2(LaunchIndex.x, LaunchDim.y - LaunchIndex.y - 1);

    const uint subSampleCount = 4;

    float2 subSamplePos[subSampleCount] = { float2(0.25, 0.25), float2(0.75, 0.25), float2(0.75, 0.75), float2(0.25, 0.75) };

    // The ray origin is the camera position in world space.
    float3 rayOrigin = float3(g_InvViewMatrix[0][3], g_InvViewMatrix[1][3], g_InvViewMatrix[2][3]);

    float aspectRatio = (float)LaunchDim.x / (float)LaunchDim.y;

    float3 color = float3(0, 0, 0);

    for (uint i = 0; i < subSampleCount; i++)
    {
        float2 ndcCoords = (frameCoord + subSamplePos[i]) / float2(LaunchDim.x - 1, LaunchDim.y - 1) ;
        
        ndcCoords = ndcCoords * 2 - float2(1, 1);
        ndcCoords = ndcCoords * g_Zoom;

        float3 viewDirection = normalize(float3(ndcCoords.x * aspectRatio, ndcCoords.y, -1));

        // Rotate the ray from view space to world space.
        float3 rayDirection = normalize(mul((float3x3)g_InvViewMatrix, viewDirection));

        RayDesc ray;
        ray.Origin = rayOrigin;
        ray.Direction = rayDirection;
        ray.TMin = 0;
        ray.TMax = 1e20f;

        RayPayload payload;
        payload.color = float3(0, 0, 0);
    
        uint missShaderIndex = 0;
        TraceRay(g_AccelStruct, 0, 0xFF, 0, 1, missShaderIndex, ray, payload);

        color += payload.color / subSampleCount;
    }

    g_Output[frameCoord] = color;
}
